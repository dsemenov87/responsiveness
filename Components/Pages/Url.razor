@page "/uri/{encodedUri}"
@rendermode InteractiveServer
@using System.Net
@using responsiveness.CommonServices
@using responsiveness.Components.Models
@using responsiveness.Models
@inject UriMonitoringModel Model
@inject IStatsCalculator StatsCalculator

<PageTitle>URL statistics</PageTitle>

<h2>@DecodeUri(EncodedUri!)</h2>
<hr/>
<div class="container">
    <div class="row justify-content-start">
        <div class="col-12 col-lg-6">
            <LinePlot Settings="@_responseTimeSettings"></LinePlot>
        </div>
        <div class="col-12 col-lg-6">
            <table class="table">
                <thead>
                <tr>
                    <th>Stage</th>
                    <th>Mean time, ms</th>
                    <th>Median time, ms</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (stage, (mean, median)) in _networkData)
                {
                <tr>
                    <td>@stage.ToString()</td>
                    <td>@mean</td>
                    <td>@median</td>
                </tr>
                }
                </tbody>
            </table>
        </div>

        <!-- Force next columns to break to new line at md breakpoint and up -->
        <div class="w-100 d-none d-md-block"></div>

    </div>
</div>
<hr/>
<ul class="list-group">
    <li class="list-group-item">
        <h4>Total errors: @_process.TotalErrorCount</h4>
    </li>
</ul>

@code {
    [Parameter]
    public string? EncodedUri { get; set; }

    private static Uri DecodeUri(string encodedUri) => new(WebUtility.UrlDecode(encodedUri));

    private UriMonitoringProcess? _process;

    private readonly LinePlotSettings _responseTimeSettings = new()
    {
        ElementId = "responseTime",
        Title = "URL response time",
        Width = 600,
        Height = 350,
        HtmlClass = "chart-left",
    };

    private readonly LinePlotSettings _errorsSettings = new()
    {
        ElementId = "errors",
        Title = "URL errors total count",
        Width = 600,
        Height = 350,
        HtmlClass = "chart-left",
    };

    private readonly Dictionary<HttpRequestStage, (double mean, double med)> _networkData = new();

    protected override void OnInitialized()
    {
        var uri = DecodeUri(EncodedUri!);
        _process = Model[uri];
        _responseTimeSettings.Data.AddRange(GetResponseTimePlotData(_process));
        _errorsSettings.Data.AddRange(GetErrorsPlotData(_process));
        UpdateNetworkData(_process);
    }

    private IEnumerable<LinePlotData> GetResponseTimePlotData(UriMonitoringProcess process)
    {
        foreach (var measurement in process.Measurements)
        {
            var time = (measurement.Timestamp - Model.StartTime).TotalMilliseconds / 1_000;
            var metrics = measurement.MetricsList.FirstOrDefault(m => m.Stage == HttpRequestStage.TotalRequest);
            if (metrics is null) continue;
            
            yield return new LinePlotData { MetricName = "Mean", N = metrics.Mean, Timestamp = time };
            yield return new LinePlotData { MetricName = "StdDev", N = metrics.StdDev, Timestamp = time };
            yield return new LinePlotData { MetricName = "Median", N = metrics.Median, Timestamp = time };
        }
    }

    private IEnumerable<LinePlotData> GetErrorsPlotData(UriMonitoringProcess process)
    {
        var counter = 0;
        foreach (var errorTime in process.Errors)
        {
            var time = (errorTime - Model.StartTime).TotalMilliseconds / 1_000;
            yield return new LinePlotData { MetricName = "Error", N = ++counter, Timestamp = time };
        }
    }
    
    private void UpdateNetworkData(UriMonitoringProcess process)
    {
        var data = new Dictionary<HttpRequestStage, List<double>>();
        foreach (var measurement in process.Measurements)
        {
            var time = (measurement.Timestamp - Model.StartTime).TotalMilliseconds / 1_000;
            foreach (var metrics in measurement.MetricsList)
            {
                if (data.TryGetValue(metrics.Stage, out var value))
                    value.Add(metrics.Median);
                else
                {
                    var newList = new List<double>(1024) { metrics.Median };
                    data.Add(metrics.Stage, newList);
                }
            }
        }

        _networkData.Clear();
        foreach (var (stage, measurements) in data)
        {
            var mean= StatsCalculator.Mean(measurements);
            var median = StatsCalculator.Median(measurements);
            _networkData.Add(stage, (mean, median));
        }
    }
}
