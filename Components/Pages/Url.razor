@page "/uri/{encodedUri}"
@rendermode InteractiveServer
@using System.Net
@using responsiveness.CommonServices
@using responsiveness.Components.Models
@using responsiveness.Models
@inject UriMonitoringModel Model
@inject IStatsCalculator StatsCalculator

<PageTitle>URL statistics</PageTitle>

<h2>@DecodeUri(EncodedUri!)</h2>
<hr/>
<div class="container">
    <div class="row justify-content-start">
        <div class="col-12 col-sm-6">
            <LinePlot Settings="@_responseTimeSettings"></LinePlot>
        </div>
        <div class="col-12 col-sm-6">
            <table class="table">
                <thead>
                <tr>
                    <th>Stage</th>
                    <th>Mean time, ms</th>
                    <th>Median time, ms</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (stage, (mean, median)) in _networkData)
                {
                <tr>
                    <td>@stage.ToString()</td>
                    <td>@mean</td>
                    <td>@median</td>
                </tr>
                }
                </tbody>
            </table>
        </div>

        <!-- Force next columns to break to new line at md breakpoint and up -->
        <div class="w-100 d-none d-md-block"></div>

    </div>
</div>
<ul class="list-group">
    <li class="list-group-item">
        <h4>Total errors: @(_process?.TotalErrorCount ?? 0)</h4>
    </li>
</ul>

@code {
    [Parameter]
    public string? EncodedUri { get; set; }

    private static Uri DecodeUri(string encodedUri) => new(WebUtility.UrlDecode(encodedUri));

    private UriMonitoringProcess? _process;

    private readonly LinePlotSettings _responseTimeSettings = new()
    {
        ElementId = "responseTime",
        Title = "URL response time",
        Width = 600,
        Data =
        {
            new List<LinePlotData>(),
            new List<LinePlotData>(),
            new List<LinePlotData>(),
        },
        Height = 350,
    };

    private readonly Dictionary<HttpRequestStage, (double mean, double med)> _networkData = new();

    protected override void OnInitialized()
    {
        var uri = DecodeUri(EncodedUri!);
        _process = Model[uri];
        UpdateResponseTime(_process);
        UpdateNetworkData(_process);
    }

    private void UpdateResponseTime(UriMonitoringProcess process)
    {
        var data = _responseTimeSettings.Data;
        data[0].Clear();
        data[1].Clear();
        data[2].Clear();
        foreach (var measurement in process.Measurements)
        {
            var time = (measurement.Timestamp - Model.StartTime).TotalMilliseconds / 1_000;
            var metrics = measurement.MetricsList.FirstOrDefault(m => m.Stage == HttpRequestStage.Request);
            if (metrics is null) continue;
            
            data[0].Add(new LinePlotData { Name = "Mean", Y = metrics.Mean, X = time });
            data[1].Add(new LinePlotData { Name = "StdDev", Y = metrics.StdDev, X = time });
            data[2].Add(new LinePlotData { Name = "Median", Y = metrics.Median, X = time });
        }
    }

    private void UpdateNetworkData(UriMonitoringProcess process)
    {
        var data = new Dictionary<HttpRequestStage, List<double>>();
        foreach (var measurement in process.Measurements)
        {
            var time = (measurement.Timestamp - Model.StartTime).TotalMilliseconds / 1_000;
            foreach (var metrics in measurement.MetricsList)
            {
                if (data.TryGetValue(metrics.Stage, out var value))
                    value.Add(metrics.Median);
                else
                {
                    var newList = new List<double>(1024) { metrics.Median };
                    data.Add(metrics.Stage, newList);
                }
            }
        }

        _networkData.Clear();
        foreach (var (stage, measurements) in data)
        {
            var mean= StatsCalculator.Mean(measurements);
            var median = StatsCalculator.Median(measurements);
            _networkData.Add(stage, (mean, median));
        }
    }
}
